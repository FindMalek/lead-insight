model FileUpload {
  id String @id @default(uuid())

  fileName     String
  originalName String
  mimeType     String
  path         String

  size Int

  errorMessage String?
  status       UploadStatus @default(PENDING)

  importJob ImportJob?

  processedAt DateTime?
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("file_upload")
}

model ImportJob {
  id String @id @default(uuid())

  type ImportType

  totalRows     Int?
  failedRows    Int?
  processedRows Int?

  progress Float? // Percentage of completion (0-100)
  status   JobStatus @default(QUEUED)

  logs ImportJobLog[]

  metadata     Json? // Additional metadata about the import
  errorMessage String?
  batchId      String? // Reference to the created batch (if applicable)

  startedAt   DateTime?
  completedAt DateTime?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  fileUploadId String     @unique
  fileUpload   FileUpload @relation(fields: [fileUploadId], references: [id], onDelete: Cascade)

  @@map("import_job")
}

model ImportJobLog {
  id String @id @default(uuid())

  message String

  metadata Json?
  level    LogLevel

  createdAt DateTime @default(now())

  importJobId String
  importJob   ImportJob @relation(fields: [importJobId], references: [id], onDelete: Cascade)

  @@index([importJobId])
  @@map("import_job_log")
}
